package workshop;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public class BookingRegister {

	private static HashMap<Facility, ArrayList<Booking>> allBooking = new HashMap<Facility, ArrayList<Booking>>();

	public void addBooking(Member member, Facility facility, LocalDateTime startDate, LocalDateTime endDate)
			throws BadBookingException {
		try {
			Booking b = new Booking(member, facility, startDate, endDate);
			if (allBooking.containsKey(facility) == false) {
				ArrayList<Booking> bookings = new ArrayList<Booking>();
				bookings.add(b);
				allBooking.put(facility, bookings);

			} else {
				ArrayList<Booking> bookings = allBooking.get(facility);
				Iterator<Booking> i = bookings.iterator();
				while (i.hasNext()) {
					if (b.overlaps(i.next())) {
						throw new BadBookingException("New booking overlaps with existing one");
					}
				}
				bookings.add(b);
				allBooking.put(facility, bookings);
			}
		} catch (BadBookingException be) {
			System.out.println("Bad Booking Exception: " + be.getMessage());
		}
	}

//	public ArrayList<Booking> getBookings(Facility facility, LocalDateTime start, LocalDateTime endDate) {
//
//		ArrayList<Booking> result = new ArrayList<Booking>();
//		ArrayList<Booking> bookings = allBooking.get(facility);
//		Iterator<Booking> i = bookings.iterator();
//		while (i.hasNext()) {
//			if (start.isAfter(start))) 
//			{
//				System.out.println(">>>>>> 1");
//				result.add(i.next());
//				System.out.println(">>>>>> 2");
//			}			
//		}
//		return result;
//	}
	
	  public ArrayList<Booking> getBookings (Facility facility,
	            LocalDateTime startDate, LocalDateTime endDate) {
	    	ArrayList<Booking> selected = new ArrayList<Booking> ();
	        ArrayList<Booking> bookingList = allBooking.get (facility);
	        if (bookingList != null) {
	            Iterator<Booking> i = bookingList.iterator ();
	            while (i.hasNext ()) {
	                Booking b = i.next();
	                boolean earlier = startDate.isAfter (b.getEndDate());
	                boolean later = endDate.isBefore (b.getStartDate());
	                if (!(earlier || later)) {
	                	selected.add (b);
	                }
	            }
	        }
	        return selected;
}}
